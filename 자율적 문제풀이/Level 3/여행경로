#include <string>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

vector<string> answer;
int num_tic;

bool dfs(string now, vector<vector<string>> t, vector<bool> visited, int used)
{
    answer.push_back(now);
    if(used == num_tic) return true;
    
    for(int i=0;i<num_tic;i++)
    {
        if(t[i][0]==now && visited[i] == false)
        {
            visited[i] = true;
            if(dfs(t[i][1],t,visited,used+1))
            {
                return true;
            }
            visited[i] = false;
        }
    }
    answer.pop_back();
    return false;
}

vector<string> solution(vector<vector<string>> tickets) {
    vector<bool> visited;
    for(int i=0;i<tickets.size();i++) visited.push_back(false);
    num_tic = tickets.size();
    sort(tickets.begin(),tickets.end());
    dfs("ICN",tickets,visited,0);
    return answer;
}
