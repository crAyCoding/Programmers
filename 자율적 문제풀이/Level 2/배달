#include <iostream>
#include <vector>
#include <queue>
#define INF 1e8
using namespace std;

vector<pair<int,int>> arr[500];
int saved[500];

void dijkstra(int start)
{
    priority_queue<pair<int,int>> pq;
    pq.push({0,start});
    saved[start] = 0;
    
    
    while(!pq.empty())
    {
        int now_cost = -pq.top().first;
        int now_node = pq.top().second;
        pq.pop();
        
        if(saved[now_node]<now_cost) continue;
        
        for(int i=0;i<arr[now_node].size();i++)
        {
            int new_cost = now_cost + arr[now_node][i].second;
            
            if(new_cost < saved[arr[now_node][i].first])
            {
                saved[arr[now_node][i].first] = new_cost;
                pq.push({-new_cost,arr[now_node][i].first});
            }
        }
    }
}

int solution(int N, vector<vector<int> > road, int K) {
    int answer = 0;
    
    for(vector<int> v : road)
    {
        arr[v[0]].push_back({v[1],v[2]});
        arr[v[1]].push_back({v[0],v[2]});
    }
    
    fill(saved,saved+500,INF);

    dijkstra(1);
    
    for(int i=1;i<=N;i++)
    {
        if(saved[i]<=K) answer++;
    }
    
    return answer;
}
